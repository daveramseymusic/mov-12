[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "mov-12",
    "section": "",
    "text": "This file will become your README and also the index of your documentation."
  },
  {
    "objectID": "index.html#install",
    "href": "index.html#install",
    "title": "mov-12",
    "section": "Install",
    "text": "Install\npip install mov_12"
  },
  {
    "objectID": "index.html#how-to-use",
    "href": "index.html#how-to-use",
    "title": "mov-12",
    "section": "How to use",
    "text": "How to use\nFill me in please! Don’t forget code examples:\n\n1+1\n\n2"
  },
  {
    "objectID": "core.html",
    "href": "core.html",
    "title": "core",
    "section": "",
    "text": "source\n\nfoo\n\n foo ()"
  },
  {
    "objectID": "movie_recommender.html",
    "href": "movie_recommender.html",
    "title": "This is Dave’s Movie Recommender",
    "section": "",
    "text": "1+1\n\n2\n\n\nGradio allows you to easily publish your model onto the web for peope to use.\n\n# !pip install gradio\n\nnbdev is what we’re using to make this documentation easier and more presentable.\n\n#load your the model and data loaders\nlearn = load_learner(path/'model_movie_predictor_large9mil_ds_19_062.pkl')\ndls = torch.load(path/'movie_9mil_03_dls')\n\n\nsource\n\nget_movie_recs\n\n get_movie_recs (full_title)\n\nThis function will use the nn.CosineSimilarity on the 50 latent factors for each movie to find the 30 movies most similar to your favorite movie.\n\nsource\n\n\nsearch_movies\n\n search_movies (favorite_movie)\n\n\nintf = gr.Interface(fn=search_movies,\n                    inputs=gr.Textbox(lines=1,placeholder=\"Put Your Favorite Movie Here To See Similar Movie Recommendations...\"),\n                    outputs=[\"text\",\"text\"],\n                    examples=['Child\\'s Play (1988)','Rushmore','brothers Bloom','call me by your name', 'Jumanji (1995)','The Three Amigos'],\n                    title=\"Dave's Fast.AI Movie Recommender\",\n                    article='This recommender uses a collaborative filtering model fashioned from the [Fast.AI](https://github.com/fastai/fastbook/blob/master/08_collab.ipynb) library and trained on the 9 million movie reviews from the [Movie Lense Dataset](https://grouplens.org/datasets/movielens/25m/).  It trains Latent Factors to give movies and users descriptive weights that help predict thier reivews based on these factors.  The model was trained completely WITHOUT titles, descriptions, or categories and amazingly these things can be added to imporove this model.  Enjoy!'                    \n)\nintf.launch(\n    inline=False, #True publishes the page in notebook\n    share=False) #True temporarily publishes the app on gradio website for 72 hours\n\nRunning on local URL:  http://127.0.0.1:7860\n\nTo create a public link, set `share=True` in `launch()`.\n\n\n(<gradio.routes.App>, 'http://127.0.0.1:7860/', None)\n\n\n\nmovie_input = 'Buffalo Soldiers (2001)'\nft = search_movies(movie_input)\n\n\nget_movie_recs(movie_input)\n\n['Buffalo Soldiers (2001)',\n 'In the Name of the Father (1993)',\n \"Before the Devil Knows You're Dead (2007)\",\n 'Kids (1995)',\n 'Dead Presidents (1995)',\n 'Lilya 4-Ever (Lilja 4-ever) (2002)',\n 'Filth (2013)',\n 'Addiction, The (1995)',\n \"Trick 'r Treat (2007)\",\n 'Descendants, The (2011)',\n 'Magnolia (1999)',\n 'Big Blue, The (Grand bleu, Le) (1988)',\n 'Horror of Dracula (Dracula) (1958)',\n 'Lady Vengeance (Sympathy for Lady Vengeance) (Chinjeolhan geumjassi) (2005)',\n 'Thunderbolt and Lightfoot (1974)',\n 'Shining, The (1980)',\n 'Open Your Eyes (Abre los ojos) (1997)',\n 'Dead Man Walking (1995)',\n 'Why We Fight (2005)',\n 'Sicario (2015)',\n 'Mystic River (2003)',\n 'Trainspotting (1996)',\n 'Roma (2018)',\n 'Old Boy (2003)',\n 'Insomnia (2002)',\n 'Exorcist, The (1973)',\n 'Conjuring, The (2013)',\n 'Dangerous Method, A (2011)',\n 'Andalusian Dog, An (Chien andalou, Un) (1929)',\n 'Bad Times at the El Royale (2018)']"
  }
]